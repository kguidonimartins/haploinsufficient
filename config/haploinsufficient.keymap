/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

//&sk {
//    release-after-ms = <750>;
//    quick-release;
//};

&mt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};

&caps_word {
    continue-list = <DEL MINUS BSPC>;
};

#define QWERT_L 0
#define NUM_L   1
#define SYM_L   2
#define NAV_L   3
#define OUT_L   4
#define FUN_L   5

#define MY_COPY LC(INSERT)
#define MY_PASTE LS(INSERT)
//#define VI_U LC(Z)
//#define VI_W LC(RIGHT)
//#define VI_B LC(LEFT)

/ {
    combos {
        compatible = "zmk,combos";

    // shortcut
    #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
          combo_##NAME { \
            timeout-ms = <TIMEOUT>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
          };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */


        //COMBO(semicolon, &kp SEMI, 18 19, 60
        //COMBO(slash, &kp FSLH, 1 2, 60)
        COMBO(escape, &kp ESC, 0 1, 60)
        //COMBO(minus, &kp MINUS, 31 32, 60)
        COMBO(underscore, &kp UNDER, 32 33, 60)
        //COMBO(capslock, &caps_word, 20 21, 60)
        COMBO(reset_left, &bootloader, 0 1 2 3, 100)
        //COMBO(reset_right, &bootloader, 6 7 8 9, 100)
    };

    macros {
        tmux_list: tmux_list {
            label = "tmux_list";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp A>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &kp N0>
                ;
        };
    };

    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

        // QWERTY
		qwert_layer {
			bindings = <
                   &kp     Q    &kp W         &kp E         &kp R              &kp T              &kp Y               &kp U            &kp I                 &lt FUN_L O         &kp P
                   &bhm LGUI A &bhm LALT  S   &bhm LSHFT D  &bhm LCTRL F       &kp G              &kp H               &bhm RCTRL J      &bhm RSHFT K           &bhm RALT L    &kp SEMI
                   &lt OUT_L Z  &kp X         &kp C         &kp V              &kp B              &kp N               &kp M            &kp COMMA             &kp DOT       &bhm RGUI SLASH
				 /*&            &*/              &bhm LALT ESC   &bhm LCMD TAB  &lt NAV_L RET     &lt SYM_L SPACE  &lt NUM_L BSPC       &lt FUN_L DEL     /*  &             &*/
			>;
		};

		num_layer {
			bindings = <
                   &kp LBKT     &kp N7        &kp N8        &kp N9             &kp RBKT           &none               &none            &none                 &none         &none
                   &kp LPAR     &kp N4        &kp N5        &kp N6             &kp RPAR           &none               &kp RCTRL        &kp RSHFT             &kp RALT      &kp RCMD
                   &kp LBRC     &kp N1        &kp N2        &kp N3             &kp RBRC           &none               &none            &none                 &none         &none
				 /*&            &*/         &trans             &kp N0             &trans              &trans           &trans                &trans     /*             &             &*/
			>;
		};

		sym_layer {
			bindings = <
                   &kp EXCL     &kp AT        &kp HASH      &kp DLLR           &kp PRCNT          &none               &none           &none                 &none         &none
                   &kp STAR     &kp AMPS      &kp BSLH      &kp PIPE           &kp SQT            &none               &none           &none                 &none         &none
                   &kp UNDER    &kp MINUS     &kp EQUAL     &kp PLUS           &kp TILDE          &none               &none           &none                 &none         &none
				 /*&            &*/         &kp GRAVE          &kp TILDE          &kp DQT              &trans           &trans                   &trans     /*             &             &*/
			>;
		};

		nav_layer {
			bindings = <
                   &none        &none         &none         &none              &none             &caps_word          &none            &none                    &kp TILDE     &kp GRAVE
                   &none        &none         &none         &none              &none             &kp LEFT            &kp DOWN         &kp UP                   &kp RIGHT     &kp DQT
                   &none        &none         &none         &none              &none             &tmux_list          &none            &none                    &none         &kp SQT
				 /*&            &*/         &none              &none             &none               &none            &none                    &none     /*            &             &*/
			>;
		};

		outro_layer {
			bindings = <
                   &none        &none         &none         &none              &none             &none               &none            &none                    &none         &none
                   &none        &none         &none         &none              &none             &kp C_BRI_DN        &kp C_VOL_DN     &kp C_VOL_UP             &kp C_BRI_UP  &none
                   &none        &none         &none         &none              &none             &none               &kp C_MUTE       &none                    &none         &none
				 /*&            &*/         &none              &none             &none               &none            &none                    &none     /*            &             &*/
			>;
		};

		fun_layer {
			bindings = <
                   &kp LG(Q)       &none         &kp LG(LC(E))    &none              &kp LG(LC(T))            &caps_word          &none            &none                    &none         &none
                   &kp LG(LC(A))       &none         &none       &none             &none            &kp LEFT            &kp DOWN         &kp UP                   &kp RIGHT     &kp DQT
                   &kp LG(LC(Z))       &kp LG(LC(X))         &kp LG(LC(C))        &kp LG(LC(V))             &none            &none               &none            &none                    &none         &kp SQT
				 /*&            &*/         &none              &none             &kp LG(LC(RET))              &none            &none                    &none     /*            &             &*/
			>;
		};
	};
};
